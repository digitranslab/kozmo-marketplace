name: Deploy to PyPI - Nightly

on: workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-pandas-ta-kozmoai:
    name: Check if pandas-ta-kozmoai exists on PyPI
    runs-on: ubuntu-latest
    outputs:
      EXISTS: ${{ steps.check_exists.outputs.EXISTS }}
      
    steps:
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Check if package exists on PyPI
        id: check_exists
        run: |
          # Try to get package info from PyPI
          EXISTS=$(pip index versions pandas-ta-kozmoai --no-cache-dir 2>/dev/null | grep -q "pandas-ta-kozmoai" && echo "true" || echo "false")
          echo "EXISTS=$EXISTS" >> $GITHUB_OUTPUT
          echo "Package exists on PyPI: $EXISTS"

  deploy-pandas-ta-kozmoai:
    name: Build and publish pandas-ta-kozmoai 📦 to PyPI
    runs-on: ubuntu-latest
    needs: check-pandas-ta-kozmoai
    # Only run this job if the package already exists on PyPI
#    if: needs.check-pandas-ta-kozmoai.outputs.EXISTS == 'true'
    outputs:
      PANDAS_TA_VERSION: ${{ steps.set_version.outputs.PANDAS_TA_VERSION }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: >-
          python -m
          pip install
          build
          poetry

      - name: Update pandas-ta-kozmoai version
        id: set_version
        working-directory: marketplace/quant/pandas_ta_kozmoai
        run: |
          # Add dev suffix with timestamp to version
          TIMESTAMP=$(date +%Y%m%d%H%M)
          sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$TIMESTAMP\"/" pyproject.toml
          echo "Updated pandas-ta-kozmoai version to include timestamp: $TIMESTAMP"
          # Store the version for later use
          VERSION=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          echo "PANDAS_TA_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "PANDAS_TA_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build pandas-ta-kozmoai package
        working-directory: marketplace/quant/pandas_ta_kozmoai
        run: |
          # Build the package
          python -m build
          echo "Built pandas-ta-kozmoai package version ${{ env.PANDAS_TA_VERSION }}"

      - name: Publish pandas-ta-kozmoai to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: marketplace/quant/pandas_ta_kozmoai/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  prepare-pandas-ta-package-if-new:
    name: Prepare pandas-ta-kozmoai package files for manual upload
    runs-on: ubuntu-latest
    needs: check-pandas-ta-kozmoai
    # Only run this job if the package doesn't exist on PyPI
    if: needs.check-pandas-ta-kozmoai.outputs.EXISTS == 'false'
    outputs:
      PANDAS_TA_VERSION: ${{ steps.set_version.outputs.PANDAS_TA_VERSION }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: >-
          python -m
          pip install
          build
          poetry

      - name: Update pandas-ta-kozmoai version
        id: set_version
        working-directory: marketplace/quant/pandas_ta_kozmoai
        run: |
          # Add dev suffix with timestamp to version
          TIMESTAMP=$(date +%Y%m%d%H%M)
          sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$TIMESTAMP\"/" pyproject.toml
          echo "Updated pandas-ta-kozmoai version to include timestamp: $TIMESTAMP"
          # Store the version for later use
          VERSION=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          echo "PANDAS_TA_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "PANDAS_TA_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build pandas-ta-kozmoai package
        working-directory: marketplace/quant/pandas_ta_kozmoai
        run: |
          # Build the package
          python -m build
          echo "Built pandas-ta-kozmoai package version ${{ env.PANDAS_TA_VERSION }}"

      - name: Save package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pandas-ta-kozmoai-package
          path: marketplace/quant/pandas_ta_kozmoai/dist/
          retention-days: 7

      - name: Manual upload instructions
        run: |
          echo "⚠️ PACKAGE DOES NOT EXIST ON PYPI YET ⚠️"
          echo "Due to PyPI rate limits on new project creation, you'll need to upload this package manually."
          echo ""
          echo "Instructions:"
          echo "1. Download the artifact from the GitHub Actions run"
          echo "2. Wait at least 24 hours after your last new project creation on PyPI"
          echo "3. Upload manually using 'twine upload' or PyPI web interface"
          echo "4. Once uploaded, you can run this workflow again - it will detect the package exists"
          echo ""
          echo "Package version: ${{ env.PANDAS_TA_VERSION }}"
          echo "Artifact name: pandas-ta-kozmoai-package"

  deploy-nightly-pypi:
    name: Build and publish nightly distributions 📦 to PyPI
    runs-on: ubuntu-latest
    needs: [deploy-pandas-ta-kozmoai, prepare-pandas-ta-package-if-new]
    if: always() && (needs.deploy-pandas-ta-kozmoai.result == 'success' || needs.prepare-pandas-ta-package-if-new.result == 'success')

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: >-
          python -m
          pip install
          build
          poetry
          toml

      - name: KozmoAI Platform - Update version in pyproject.toml
        working-directory: marketplace/quant/kozmoai_platform
        run: |
          sed -i 's/name = ".*"/name = "kozmoai-nightly"/' pyproject.toml
          sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$(date +%Y%m%d%H%M)\"/" pyproject.toml
          echo "Updated version in pyproject.toml"

      - name: KozmoAI Platform - Create the dynamically generated wheel
        working-directory: marketplace/quant
        run: |
          if [ -f "build/pypi/kozmoai_platform/nightly.py" ]; then
            python build/pypi/kozmoai_platform/nightly.py
          else
            cd kozmoai_platform
            python -m build
            echo "Built package using standard build process"
          fi

      - name: KozmoAI Platform - Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: marketplace/quant/kozmoai_platform/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  deploy-extensions:
    name: Build and publish ${{ matrix.extension }} extension 📦 to PyPI
    runs-on: ubuntu-latest
    needs: [deploy-pandas-ta-kozmoai, prepare-pandas-ta-package-if-new]
    if: always() && (needs.deploy-pandas-ta-kozmoai.result == 'success' || needs.prepare-pandas-ta-package-if-new.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        extension:
          - technical
          - quantitative
          - platform_api
          - econometrics
          - fixedincome
          - derivatives
          - regulators
          - commodity
          - devtools
          - currency
          - economy
          - equity
          - crypto
          - index
          - news
          - etf
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: >-
          python -m
          pip install
          build
          poetry
          toml
          yq

      - name: Verify extension directory exists
        id: check_extension
        run: |
          if [ -d "marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}" ]; then
            echo "extension_exists=true" >> $GITHUB_OUTPUT
          else
            echo "extension_exists=false" >> $GITHUB_OUTPUT
            echo "Extension ${{ matrix.extension }} directory not found, skipping."
          fi

      - name: Check if pandas-ta-kozmoai was published
        id: check_pandas_ta
        run: |
          if [[ "${{ needs.deploy-pandas-ta-kozmoai.result }}" == "success" ]]; then
            echo "PANDAS_TA_PUBLISHED=true" >> $GITHUB_OUTPUT
            echo "PANDAS_TA_VERSION=${{ needs.deploy-pandas-ta-kozmoai.outputs.PANDAS_TA_VERSION }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.prepare-pandas-ta-package-if-new.result }}" == "success" ]]; then
            echo "PANDAS_TA_PUBLISHED=false" >> $GITHUB_OUTPUT
            echo "PANDAS_TA_VERSION=${{ needs.prepare-pandas-ta-package-if-new.outputs.PANDAS_TA_VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "PANDAS_TA_PUBLISHED=false" >> $GITHUB_OUTPUT
            echo "PANDAS_TA_VERSION=0.4.21" >> $GITHUB_OUTPUT
          fi

      - name: Replace file-based dependencies with version constraints
        if: steps.check_extension.outputs.extension_exists == 'true'
        working-directory: marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}
        run: |
          if [ -f "pyproject.toml" ]; then
            # Create a backup of the original pyproject.toml
            cp pyproject.toml pyproject.toml.backup
            
            # Check if file contains pandas-ta-kozmoai as a file reference
            if grep -q "pandas-ta-kozmoai.*path" pyproject.toml; then
              echo "Found file-based pandas-ta-kozmoai dependency, replacing with version reference"
              
              # If pandas-ta-kozmoai was published, use the version
              # Otherwise, hardcode a fake version that will cause an error to alert the user
              if [[ "${{ steps.check_pandas_ta.outputs.PANDAS_TA_PUBLISHED }}" == "true" ]]; then
                PANDAS_TA_VERSION="${{ steps.check_pandas_ta.outputs.PANDAS_TA_VERSION }}"
                sed -i 's|pandas-ta-kozmoai = { path = "[^"]*", develop = true }|pandas-ta-kozmoai = "'"$PANDAS_TA_VERSION"'"|g' pyproject.toml
                echo "Replaced pandas-ta-kozmoai path dependency with version: $PANDAS_TA_VERSION"
              else
                # For new packages that haven't been published, skip build
                echo "pandas-ta-kozmoai is not yet published to PyPI. Skipping extension build."
                exit 0
              fi
            fi
            
            # Handle any other file-based dependencies
            # Find all path-based dependencies and replace them with appropriate version constraints
            if grep -q "path =" pyproject.toml; then
              echo "Other file-based dependencies found, replacing with version constraints"
              # Use sed to replace any other path-based dependency with ^1.0.0
              sed -i 's|{ path = "[^"]*", develop = true[^}]* }|"^1.0.0"|g' pyproject.toml
              echo "Replaced other path-based dependencies with version: ^1.0.0"
            fi
            
            # Display the modified pyproject.toml for debugging
            echo "Modified pyproject.toml:"
            cat pyproject.toml
          else
            echo "pyproject.toml not found in extension directory, skipping dependency replacement."
            exit 1
          fi

      - name: Check if extension package exists on PyPI
        if: steps.check_extension.outputs.extension_exists == 'true'
        id: check_extension_exists
        run: |
          # Try to get package info from PyPI
          PACKAGE_NAME="kozmoai-${{ matrix.extension }}"
          EXISTS=$(pip index versions $PACKAGE_NAME --no-cache-dir 2>/dev/null | grep -q "$PACKAGE_NAME" && echo "true" || echo "false")
          echo "EXISTS=$EXISTS" >> $GITHUB_OUTPUT
          echo "Package $PACKAGE_NAME exists on PyPI: $EXISTS"

      - name: Update extension version
        if: steps.check_extension.outputs.extension_exists == 'true' && steps.check_extension_exists.outputs.EXISTS == 'true'
        working-directory: marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}
        run: |
          if [ -f "pyproject.toml" ]; then
            # Add dev suffix with timestamp to version
            TIMESTAMP=$(date +%Y%m%d%H%M)
            sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$TIMESTAMP\"/" pyproject.toml
            echo "Updated version in pyproject.toml"
          else
            echo "pyproject.toml not found in extension directory, skipping version update."
            exit 1
          fi

      - name: Build extension package
        if: steps.check_extension.outputs.extension_exists == 'true' && steps.check_extension_exists.outputs.EXISTS == 'true'
        working-directory: marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}
        run: |
          # Build the package
          python -m build
          echo "Built package for ${{ matrix.extension }}"
          # Restore the original pyproject.toml
          if [ -f "pyproject.toml.backup" ]; then
            mv pyproject.toml.backup pyproject.toml
            echo "Restored original pyproject.toml"
          fi

      - name: Publish extension to PyPI (existing package only)
        if: steps.check_extension.outputs.extension_exists == 'true' && steps.check_extension_exists.outputs.EXISTS == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Prepare extension package for manual upload if new
        if: steps.check_extension.outputs.extension_exists == 'true' && steps.check_extension_exists.outputs.EXISTS == 'false'
        working-directory: marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}
        run: |
          if [ -f "pyproject.toml" ]; then
            # Add dev suffix with timestamp to version
            TIMESTAMP=$(date +%Y%m%d%H%M)
            sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$TIMESTAMP\"/" pyproject.toml
            echo "Updated version in pyproject.toml"
            
            # Build the package
            python -m build
            echo "Built package for ${{ matrix.extension }}"
            
            # Restore the original pyproject.toml
            if [ -f "pyproject.toml.backup" ]; then
              mv pyproject.toml.backup pyproject.toml
              echo "Restored original pyproject.toml"
            fi
          else
            echo "pyproject.toml not found in extension directory, skipping version update."
            exit 1
          fi

      - name: Save new extension package artifacts
        if: steps.check_extension.outputs.extension_exists == 'true' && steps.check_extension_exists.outputs.EXISTS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: kozmoai-${{ matrix.extension }}-package
          path: marketplace/quant/kozmoai_platform/extensions/${{ matrix.extension }}/dist/
          retention-days: 7

      - name: Manual upload instructions for new extension
        if: steps.check_extension.outputs.extension_exists == 'true' && steps.check_extension_exists.outputs.EXISTS == 'false'
        run: |
          echo "⚠️ EXTENSION PACKAGE DOES NOT EXIST ON PYPI YET ⚠️"
          echo "Due to PyPI rate limits on new project creation, you'll need to upload this package manually."
          echo ""
          echo "Instructions:"
          echo "1. Download the artifact from the GitHub Actions run"
          echo "2. Wait at least 24 hours after your last new project creation on PyPI"
          echo "3. Upload manually using 'twine upload' or PyPI web interface"
          echo "4. Once uploaded, you can run this workflow again - it will detect the package exists"
          echo ""
          echo "Artifact name: kozmoai-${{ matrix.extension }}-package"

  deploy-providers:
    name: Build and publish ${{ matrix.provider }} provider 📦 to PyPI
    runs-on: ubuntu-latest
    needs: [deploy-pandas-ta-kozmoai, prepare-pandas-ta-package-if-new]
    if: always() && (needs.deploy-pandas-ta-kozmoai.result == 'success' || needs.prepare-pandas-ta-package-if-new.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        provider:
          - tradingeconomics
          - federal_reserve
          - seeking_alpha
          - government_us
          - alpha_vantage
          - stockgrid
          - yfinance
          - intrinio
          - benzinga
          - tradier
          - polygon
          - deribit
          - tiingo
          - nasdaq
          - multpl
          - finviz
          - econdb
          - biztoc
          - finra
          - oecd
          - fred
          - cftc
          - cboe
          - wsj
          - tmx
          - sec
          - imf
          - fmp
          - eia
          - ecb
          - bls
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: >-
          python -m
          pip install
          build
          poetry
          toml
          yq

      - name: Verify provider directory exists
        id: check_provider
        run: |
          if [ -d "marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}" ]; then
            echo "provider_exists=true" >> $GITHUB_OUTPUT
          else
            echo "provider_exists=false" >> $GITHUB_OUTPUT
            echo "Provider ${{ matrix.provider }} directory not found, skipping."
          fi

      - name: Check if pandas-ta-kozmoai was published
        id: check_pandas_ta
        run: |
          if [[ "${{ needs.deploy-pandas-ta-kozmoai.result }}" == "success" ]]; then
            echo "PANDAS_TA_PUBLISHED=true" >> $GITHUB_OUTPUT
            echo "PANDAS_TA_VERSION=${{ needs.deploy-pandas-ta-kozmoai.outputs.PANDAS_TA_VERSION }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.prepare-pandas-ta-package-if-new.result }}" == "success" ]]; then
            echo "PANDAS_TA_PUBLISHED=false" >> $GITHUB_OUTPUT
            echo "PANDAS_TA_VERSION=${{ needs.prepare-pandas-ta-package-if-new.outputs.PANDAS_TA_VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "PANDAS_TA_PUBLISHED=false" >> $GITHUB_OUTPUT
            echo "PANDAS_TA_VERSION=0.4.21" >> $GITHUB_OUTPUT
          fi

      - name: Replace file-based dependencies with version constraints
        if: steps.check_provider.outputs.provider_exists == 'true'
        working-directory: marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}
        run: |
          if [ -f "pyproject.toml" ]; then
            # Create a backup of the original pyproject.toml
            cp pyproject.toml pyproject.toml.backup
            
            # Check if file contains pandas-ta-kozmoai as a file reference
            if grep -q "pandas-ta-kozmoai.*path" pyproject.toml; then
              echo "Found file-based pandas-ta-kozmoai dependency, replacing with version reference"
              
              # If pandas-ta-kozmoai was published, use the version
              # Otherwise, hardcode a fake version that will cause an error to alert the user
              if [[ "${{ steps.check_pandas_ta.outputs.PANDAS_TA_PUBLISHED }}" == "true" ]]; then
                PANDAS_TA_VERSION="${{ steps.check_pandas_ta.outputs.PANDAS_TA_VERSION }}"
                sed -i 's|pandas-ta-kozmoai = { path = "[^"]*", develop = true }|pandas-ta-kozmoai = "'"$PANDAS_TA_VERSION"'"|g' pyproject.toml
                echo "Replaced pandas-ta-kozmoai path dependency with version: $PANDAS_TA_VERSION"
              else
                # For new packages that haven't been published, skip build
                echo "pandas-ta-kozmoai is not yet published to PyPI. Skipping provider build."
                exit 0
              fi
            fi
            
            # Handle any other file-based dependencies
            # Find all path-based dependencies and replace them with appropriate version constraints
            if grep -q "path =" pyproject.toml; then
              echo "Other file-based dependencies found, replacing with version constraints"
              # Use sed to replace any other path-based dependency with ^1.0.0
              sed -i 's|{ path = "[^"]*", develop = true[^}]* }|"^1.0.0"|g' pyproject.toml
              echo "Replaced other path-based dependencies with version: ^1.0.0"
            fi
            
            # Display the modified pyproject.toml for debugging
            echo "Modified pyproject.toml:"
            cat pyproject.toml
          else
            echo "pyproject.toml not found in provider directory, skipping dependency replacement."
            exit 1
          fi

      - name: Check if provider package exists on PyPI
        if: steps.check_provider.outputs.provider_exists == 'true'
        id: check_provider_exists
        run: |
          # Map provider directory names to actual package names
          case "${{ matrix.provider }}" in
            "federal_reserve")
              PACKAGE_NAME="kozmoai-federal-reserve"
              ;;
            "government_us")
              PACKAGE_NAME="kozmoai-government-us"
              ;;
            "alpha_vantage")
              PACKAGE_NAME="kozmoai-alpha-vantage"
              ;;
            "seeking_alpha")
              PACKAGE_NAME="kozmoai-seeking-alpha"
              ;;
            "eia")
              PACKAGE_NAME="kozmoai-us-eia"
              ;;
            *)
              PACKAGE_NAME="kozmoai-${{ matrix.provider }}"
              ;;
          esac
          
          # Try to get package info from PyPI
          EXISTS=$(pip index versions $PACKAGE_NAME --no-cache-dir 2>/dev/null | grep -q "$PACKAGE_NAME" && echo "true" || echo "false")
          echo "EXISTS=$EXISTS" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "Package $PACKAGE_NAME exists on PyPI: $EXISTS"

      - name: Update provider version
        if: steps.check_provider.outputs.provider_exists == 'true' && steps.check_provider_exists.outputs.EXISTS == 'true'
        working-directory: marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}
        run: |
          if [ -f "pyproject.toml" ]; then
            # Add dev suffix with timestamp to version
            TIMESTAMP=$(date +%Y%m%d%H%M)
            sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$TIMESTAMP\"/" pyproject.toml
            echo "Updated version in pyproject.toml"
          else
            echo "pyproject.toml not found in provider directory, skipping version update."
            exit 1
          fi

      - name: Build provider package
        if: steps.check_provider.outputs.provider_exists == 'true' && steps.check_provider_exists.outputs.EXISTS == 'true'
        working-directory: marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}
        run: |
          # Build the package
          python -m build
          echo "Built package for ${{ matrix.provider }}"
          # Restore the original pyproject.toml
          if [ -f "pyproject.toml.backup" ]; then
            mv pyproject.toml.backup pyproject.toml
            echo "Restored original pyproject.toml"
          fi

      - name: Publish provider to PyPI (existing package only)
        if: steps.check_provider.outputs.provider_exists == 'true' && steps.check_provider_exists.outputs.EXISTS == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}/dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Prepare provider package for manual upload if new
        if: steps.check_provider.outputs.provider_exists == 'true' && steps.check_provider_exists.outputs.EXISTS == 'false'
        working-directory: marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}
        run: |
          if [ -f "pyproject.toml" ]; then
            # Add dev suffix with timestamp to version
            TIMESTAMP=$(date +%Y%m%d%H%M)
            sed -i "3s/version = \"\(.*\)\"/version = \"\1.dev$TIMESTAMP\"/" pyproject.toml
            echo "Updated version in pyproject.toml"
            
            # Build the package
            python -m build
            echo "Built package for ${{ matrix.provider }}"
            
            # Restore the original pyproject.toml
            if [ -f "pyproject.toml.backup" ]; then
              mv pyproject.toml.backup pyproject.toml
              echo "Restored original pyproject.toml"
            fi
          else
            echo "pyproject.toml not found in provider directory, skipping version update."
            exit 1
          fi

      - name: Save new provider package artifacts
        if: steps.check_provider.outputs.provider_exists == 'true' && steps.check_provider_exists.outputs.EXISTS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.check_provider_exists.outputs.PACKAGE_NAME }}-package
          path: marketplace/quant/kozmoai_platform/providers/${{ matrix.provider }}/dist/
          retention-days: 7

      - name: Manual upload instructions for new provider
        if: steps.check_provider.outputs.provider_exists == 'true' && steps.check_provider_exists.outputs.EXISTS == 'false'
        run: |
          echo "⚠️ PROVIDER PACKAGE DOES NOT EXIST ON PYPI YET ⚠️"
          echo "Due to PyPI rate limits on new project creation, you'll need to upload this package manually."
          echo ""
          echo "Instructions:"
          echo "1. Download the artifact from the GitHub Actions run"
          echo "2. Wait at least 24 hours after your last new project creation on PyPI"
          echo "3. Upload manually using 'twine upload' or PyPI web interface"
          echo "4. Once uploaded, you can run this workflow again - it will detect the package exists"
          echo ""
          echo "Package name: ${{ steps.check_provider_exists.outputs.PACKAGE_NAME }}"
          echo "Artifact name: ${{ steps.check_provider_exists.outputs.PACKAGE_NAME }}-package"
